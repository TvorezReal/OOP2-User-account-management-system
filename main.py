# Разработай систему управления учетными записями пользователей для небольшой компании. Компания разделяет сотрудников
# на обычных работников и администраторов. У каждого сотрудника есть уникальный идентификатор (ID), имя и уровень
# доступа. Администраторы, помимо обычных данных пользователей, имеют дополнительный уровень доступа и могут добавлять
# или удалять пользователя из системы.
# Требования:
# 1.Класс User: Этот класс должен инкапсулировать данные о пользователе: ID, имя и уровень доступа
# ('user' для обычных сотрудников).
# 2.Класс Admin: Этот класс должен наследоваться от класса User. Добавь дополнительный атрибут уровня доступа,
# специфичный для администраторов ('admin'). Класс должен также содержать методы add_user и remove_user, которые
# позволяют добавлять и удалять пользователей из списка (представь, что это просто список экземпляров User).
# 3.Инкапсуляция данных: Убедись, что атрибуты классов защищены от прямого доступа и модификации снаружи.
# Предоставь доступ к необходимым атрибутам через методы (например, get и set методы).

class User:
    # Инициализация атрибутов класса User
    def __init__(self, user_id, name):
        self.__user_id = user_id
        self.__name = name
        self.__access_level = 'user'

    # Метод для получения ID пользователя
    def get_user_id(self):
        return self.__user_id

    # Метод для получения имени пользователя
    def get_name(self):
        return self.__name

    # Метод для установки нового имени пользователя
    def set_name(self, new_name):
        self.__name = new_name

    # Метод для получения уровня доступа пользователя
    def get_access_level(self):
        return self.__access_level

    # Строковое представление объекта
    def __str__(self):
        return f"ID: {self.__user_id}, Имя: {self.__name}, Уровень доступа: {self.__access_level}"


class Admin(User):
    # Инициализация атрибутов класса Admin
    def __init__(self, user_id, name):
        super().__init__(user_id, name)
        self.__access_level = 'admin'  # Отличный уровень доступа для администратора

    # Метод для добавления нового пользователя
    def add_user(self, users_list, user):
        if user not in users_list:
            users_list.append(user)
            print(f"Пользователь {user.get_name()} успешно добавлен.")
        else:
            print("Этот пользователь уже существует.")
        for i in users_list:
            print(i)

    # Метод для удаления пользователя
    def remove_user(self, users_list, user):
        if user in users_list:
            users_list.remove(user)
            print(f"Пользователь {user.get_name()} удален.")
        else:
            print("Пользователь не найден.")

    # Переопределение метода для получения уровня доступа
    def get_access_level(self):
        return self.__access_level


# Создание списка пользователей
users_list = []

# Создание объектов классов User и Admin
user_1 = User("002", "Петя")
user_2 = User("003", "Боря")
admin_1 = Admin("001", "Вася")

# Админ добавляет пользователя в систему
admin_1.add_user(users_list, user_1)
admin_1.add_user(users_list, user_2)

# Админ удаляет пользователя из системы
admin_1.remove_user(users_list, user_2)


# Демонстрация инкапсуляции данных
# Попытка прочитать защищенный атрибут
# print(user_1.__user_id)  # Выдаст ошибку, так как атрибут защищен

# Использование методов для доступа к данным
print(user_1.get_user_id())  # Корректно выводит ID пользователя
print(user_1.get_name())  # Корректно выводит имя пользователя
print(user_1.get_access_level())  # Корректно выводит уровень доступа
print(admin_1.get_access_level())  # Корректно выводит уровень доступа